/*
 * generated by Xtext 2.22.0
 */
package xtext.http.rest.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import xtext.http.rest.testSuite.TestCollection
import xtext.http.rest.testSuite.Test
import xtext.http.rest.testSuite.Header
import org.eclipse.emf.common.util.EList
import xtext.http.rest.testSuite.TestElement


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TestSuiteGenerator extends AbstractGenerator {
	
	val assertionGenerator = new AssertionGenerator();
	val requestGenerator = new RequestGenerator();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val testCollection = resource.allContents.filter(TestCollection).toList.get(0);
		fsa.generateFile(testCollection.name + '.java', getTestSuiteContent(testCollection));
	}
	
	def getTestSuiteContent(TestCollection it) {
	return '''
	import org.apache.http.Header;
	import org.apache.http.client.methods.*;
	import org.apache.http.impl.client.CloseableHttpClient;
	import org.apache.http.impl.client.HttpClients;
	import java.util.Arrays;
	import java.io.IOException;
	import org.junit.jupiter.api.AfterAll;
	import org.junit.jupiter.api.Test;
	import static org.junit.jupiter.api.Assertions.*;
	import org.apache.http.entity.StringEntity;
	import org.apache.http.util.EntityUtils;
	import com.google.gson.JsonObject;
	import com.google.gson.JsonParser;
	
	public class «name» {
		// «description»
		private static CloseableHttpClient httpclient = HttpClients.createDefault();

		
		@AfterAll
		static void afterAll() throws IOException {
			httpclient.close();
		}
		
		«FOR test:tests»
			«getTest(test, headersInEveryCall)»				
		«ENDFOR»
	}
	
	'''}
	
	def getTest(Test it, EList<Header> headersInEveryCall) {
	var nr = 0;
	return '''
	@Test
	void «name»() throws Exception{
		«getLocalFields(it)»
		«FOR te:testElements»
		«getTestElement(te, headersInEveryCall, nr++)»
		«ENDFOR»
	}
	'''
	}
	
	def getLocalFields(Test it){
		return vars.map[m | "String " + m.name + " = \"" + m.value + "\";" ]
					.join("\n");
	}

	def getTestElement(TestElement it, EList<Header> headersInEveryCall, int nr)'''
		«requestGenerator.getRequest(it.request, nr)»
		«FOR h:headersInEveryCall»
		«requestGenerator.getHeader(h, nr)»
		«ENDFOR»
		«FOR h:request.headers»
		«requestGenerator.getHeader(h, nr)»
		«ENDFOR»

		try(CloseableHttpResponse response = httpclient.execute(request«nr»)){
			String responseEntity = response.getEntity() == null ? null : EntityUtils.toString(response.getEntity());
			System.out.println("Result: " + responseEntity);
			«IF request.savedValues.size > 0»
			JsonObject jsonObject = responseEntity == null ? null : JsonParser.parseString(responseEntity).getAsJsonObject();
			«ENDIF»
			«FOR variable:request.savedValues»
			«variable.name» = jsonObject.get("«variable.reference»").getAsString();
			«ENDFOR»
			«FOR assertion:assertions»
			«assertionGenerator.getAssertion(assertion)»
			«ENDFOR»
		}
		
	'''	
}
